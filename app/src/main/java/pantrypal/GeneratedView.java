package pantrypal;

import javafx.scene.layout.VBox;

import java.io.UnsupportedEncodingException;

// import org.hamcrest.Condition.Step;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.awt.image.*;
import javax.imageio.ImageIO;

// GeneratedView class for displaying and interacting with generated recipes
public class GeneratedView extends VBox{
    private Button CancelButton;
    private Label Createlabel;
    private TextArea Instruction;
    private TextArea IngredientList;
    private Button SaveButton;

    private ImageView Image;

    private Button refreshButton;

    GeneratedView(){

        Createlabel = new Label();
        Createlabel.setPrefSize(600, 200);
        Createlabel.setAlignment(Pos.CENTER);
        Createlabel.setPadding(new Insets(10,0,10,0));
        this.getChildren().add(Createlabel);       

        IngredientList = new TextArea();
        IngredientList.setEditable(false);
        IngredientList.setPrefSize(600, 300);
        IngredientList.setStyle("-fx-background-color: #DAE5EA; -fx-border-width: 0;");
        IngredientList.setPadding(new Insets(10,0,10,0));
        this.getChildren().add(IngredientList);

        Instruction = new TextArea();
        Instruction.setEditable(false);
        Instruction.setPrefSize(600, 200);
        Instruction.setStyle("-fx-background-color: #DAE5EA; -fx-border-width: 0;");
        Instruction.setPadding(new Insets(10,0,10,0));
        this.getChildren().add(Instruction);
        Image = new ImageView();

        this.getChildren().add(Image);

        CancelButton = new Button("Back");
        CancelButton.setPrefSize(600, 50);
        CancelButton.setStyle("-fx-background-color: #6495ED; -fx-border-width: 0;");
        CancelButton.setAlignment(Pos.CENTER);
        this.getChildren().add(CancelButton);

        SaveButton = new Button("Save this recipe to My List");
        SaveButton.setPrefSize(600, 50);
        SaveButton.setStyle("-fx-background-color: #6495ED; -fx-border-width: 0;");
        SaveButton.setAlignment(Pos.CENTER);
        this.getChildren().add(SaveButton);

        refreshButton = new Button("Refresh");
        refreshButton.setPrefSize(600, 50);
        refreshButton.setStyle("-fx-background-color: #6495ED; -fx-border-width: 0;");
        refreshButton.setAlignment(Pos.CENTER);
        this.getChildren().add(refreshButton);

    }
     // Getter methods for UI components
    public Label getCreatedLabel(){
        return this.Createlabel;
    }
    public TextArea getInstruction(){
        return this.Instruction;
    }
    public TextArea getIngredientList(){
        return this.IngredientList;
    }
    public static Scene CreateScene(GeneratedView d){
        Scene secondScene = new Scene(d, 500, 800);
        return secondScene;
    }
    public ImageView getImageView(){
        return this.Image;
    }
     // Method to open and display the generated recipe view
    public void OpenGeneratedView(Recipe generatedRecipe, Stage original, RecipeList taskList) throws IOException{
         // Create a new scene and window for the generated view
        Scene secondScene = CreateScene(this);
		// New window (Stage)
		Stage newWindow = new Stage();
        String name = generatedRecipe.getTitle();
        String IngredientLists = generatedRecipe.getIngredients();
        String StepbyStep = generatedRecipe.getSteps();
        newWindow.setTitle("Generated by AI");
        newWindow.setScene(secondScene);

         // Set the content of the generated view based on the recipe
        this.getCreatedLabel().setText(name);
        this.getIngredientList().setText(IngredientLists);
        this.getInstruction().setText(StepbyStep);
        Image image = new Image(generatedRecipe.getImage());
        this.getImageView().setImage(image);
        this.
         // Set action for CancelButton to close the view
        CancelButton.setOnAction(e -> {
            original.close();
            newWindow.close();
        });

          // Set action for SaveButton to save the recipe and add it to the list
        SaveButton.setOnAction(e -> {

              // Create a new RecipeView and set up the action for its title button
            RecipeView newrecipe = new RecipeView(generatedRecipe);
            Button titleButton = newrecipe.getTitle();            
            titleButton.setOnAction(e1 -> {
                try {
                    newrecipe.OpenDetailView(newrecipe.getStage(), taskList);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            });

            Recipe recipeToAdd = newrecipe.getRecipe();
            
            // Perform a PUT request to save the recipe on the server
            taskList.getPerformRequest().performRequest("", "PUT", 
                    recipeToAdd.toString() 
                    + ";" + taskList.getRecipeId(), null);
            PerformRequest.performImageRequest("Image", "PUT", null, recipeToAdd.getImage() + "IMAGE_SEP" + recipeToAdd.getTitle()+ "IMAGE_SEP" + taskList.getRecipeId());
            for(int i = 0; i< taskList.getChildren().size(); i++){
                if(taskList.getChildren().get(i) instanceof RecipeView){
                    RecipeView intask = (RecipeView) taskList.getChildren().get(i);
                    if(intask.getRecipe().getTitle().equals(recipeToAdd.getTitle())){
                        intask.getRecipe().setImage(recipeToAdd.getImage());
                    }
                    titleButton = intask.getTitle();
                    titleButton.setOnAction(e3 -> {
                        try {
                    intask.OpenDetailView(intask.getStage(), taskList);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
                    });
                }
            }
            original.close();
            newWindow.close();
        });

        refreshButton.setOnAction(e-> {
            try {
                refreshButtonAction(generatedRecipe, newWindow, original, taskList);
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        });

        newWindow.show();
    }

    public Image ByteArrayToImage(byte[] Ans) throws IOException{
        OutputStream os = new FileOutputStream("response.jpg"); 
        // Starting writing the bytes in it
        os.write(Ans);
        os.close();
        File pic = new File("response.jpg");
        Image images = new Image(pic.toURI().toString());
        pic.delete();
        return images;
    }
    private void refreshButtonAction(Recipe oldRecipe, Stage oldWindow, Stage originalCreateWindow, RecipeList recipeList) throws IOException {
        oldWindow.close();
       
        String mealType = oldRecipe.getMealType();
        String ingredients = oldRecipe.getIngredients();
        
        Recipe refreshedRecipe  = CreateView.GetGeneratedRecipe(mealType, ingredients);
        
         GeneratedView newView = new GeneratedView();
         newView.OpenGeneratedView(refreshedRecipe, originalCreateWindow, recipeList);

    }
}
